// netlify/functions/get-ai-welcome.js

const { GoogleGenerativeAI } = require("@google/generative-ai");

// Access your API key as an environment variable.
// This variable MUST be set in your Netlify Site Settings -> Build & deploy -> Environment variables.
const API_KEY = process.env.GEMINI_API_KEY;

// Initialize the Google Generative AI client.
// This will throw an error if API_KEY is undefined, which is good for debugging.
const genAI = new GoogleGenerativeAI(API_KEY);

// This is the main handler function that Netlify (AWS Lambda) will execute.
// It MUST be named 'handler' and exported using 'exports.handler'.
exports.handler = async function(event, context) {
    // Ensure the function only responds to POST requests, as expected by your frontend.
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405, // Method Not Allowed
            body: JSON.stringify({ message: "Method Not Allowed - Only POST requests are accepted." })
        };
    }

    // Basic check for API key presence at runtime.
    // (A more robust check should also be done at deployment if possible, but this catches runtime issues).
    if (!API_KEY) {
        console.error("RUNTIME ERROR: GEMINI_API_KEY environment variable is missing.");
        return {
            statusCode: 500,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ error: "Server configuration error: AI API key is missing." })
        };
    }

    try {
        // Parse the request body, which should contain userName and timeOfDay from your frontend.
        const { userName, timeOfDay } = JSON.parse(event.body);

        // Validate that essential data is provided.
        if (!userName) {
            return {
                statusCode: 400, // Bad Request
                body: JSON.stringify({ error: "User name is required in the request body." })
            };
        }
        // timeOfDay is optional, will default in prompt if not provided.

        // Get the generative model. 'gemini-pro' is suitable for text generation.
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });

        // Construct the prompt for the AI model.
        // It's designed to be friendly, personalized, and motivational.
        const prompt = `Generate a short, friendly, and motivational welcome message for a to-do list app user. 
        Address the user by name: ${userName}. 
        Mention the current time of day: ${timeOfDay || 'day'}.
        Encourage them to get organized or tackle their tasks for the day. 
        Keep it concise, around 1-2 sentences. 
        
        Examples: 
        - "Good morning, Alex! Let's conquer those tasks today and make it a productive morning."
        - "Hello Sarah, good afternoon! Ready to tick off some items and make progress?"
        - "Hi David, happy evening! Time to plan for tomorrow or review your day's achievements."
        - "Welcome back, Chris! It's a great time to organize your thoughts and prepare for what's next."
        `;

        // Make the API call to Gemini.
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const text = response.text(); // Extract the actual text generated by the AI.

        // Return the AI-generated message to your frontend.
        return {
            statusCode: 200, // OK
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: text })
        };

    } catch (error) {
        // Log any errors that occur during execution for debugging in Netlify logs.
        console.error('Error in Netlify function execution:', error);

        // Return an error response to the client.
        return {
            statusCode: 500, // Internal Server Error
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ error: "Failed to generate AI message due to an internal server error.", details: error.message })
        };
    }
};